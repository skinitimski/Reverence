<!-- ********* ITEMS ********* -->
<items>
    <!-- NOTE: not a real item -->
    <item>
        <name>Kill</name>
        <desc>Decimates a combatant</desc>
        <field target="Character">
            <canUse>return not c.Death</canUse>
            <use>c.HP = 0 c.MP = 0</use>
        </field>
        <battle target="Combatant" intendedForEnemies="true">
            <use>t:InflictDeath(s)</use>
        </battle>
    </item>
    <!-- NOTE: not a real item -->
    <item>
        <name>Raise</name>
        <desc>Breathes life into a combatant</desc>
        <field target="Character">
            <canUse>return c.Death</canUse>
            <use>
                c:CureDeath()
                c.HP = c.MaxHP
                c.MP = c.MaxMP
            </use>
        </field>
        <battle target="Combatant" intendedForEnemies="false">
            <use>
                t:Recover(s)
            </use>
        </battle>
    </item>
    
    <item>
        <name>Potion</name>
        <desc>Restores 100 HP</desc>
        <field target="Character">
            <canUse>return not (c.Death or c.HPFull)</canUse>
            <use>c.HP = c.HP + 100</use>
        </field>
        <battle target="Combatant">
            <use>if not t.Death then t:AcceptDamage(s, -100) end</use>
        </battle>
    </item>
    <item>
        <name>Hi-Potion</name>
        <desc>Restores 500 HP</desc>
        <field target="Character">
            <canUse>return not (c.Death or c.HPFull)</canUse>
            <use>c.HP = c.HP + 500</use>
        </field>
        <battle target="Combatant">
            <use>if not t.Death then t:AcceptDamage(s, -500) end</use>
        </battle>
    </item>
    <item>
        <name>X-Potion</name>
        <desc>Restores all HP</desc>
        <field target="Character">
            <canUse>return not (c.Death or c.HPFull)</canUse>
            <use>c.HP = c.MaxHP</use>
        </field>
        <battle target="Combatant">
            <use>if not t.Death then t:AcceptDamage(s, -t.MaxHP) end</use>
        </battle>
    </item>
    <item>
        <name>Ether</name>
        <desc>Restores 100 MP</desc>
        <field target="Character">
            <canUse>return not (c.Death or c.MPFull)</canUse>
            <use>c.MP = c.MP + 100</use>
        </field>
        <battle target="Combatant">
            <use>if not t.Death then t:AcceptMPLoss(s, -100) end</use>
        </battle>
    </item>
    <item>
        <name>Turbo Ether</name>
        <desc>Restores all MP</desc>
        <field target="Character">
            <canUse>return not (c.Death or c.MPFull)</canUse>
            <use>c.MP = c.MaxMP</use>
        </field>
        <battle target="Combatant">
            <use>if not t.Death then t:AcceptMPLoss(s, -c.MaxMP) end</use>
        </battle>
    </item>
    <item>
        <name>Elixir</name>
        <desc>Restores all HP/MP</desc>
        <field target="Character">
            <canUse>return not (c.Death or (c.MPFull and c.HPFull))</canUse>
            <use>c.HP = c.MaxHP c.MP = c.MaxMP</use>
        </field>
        <battle target="Combatant">
            <use>if not t.Death then t:AcceptDamage(s, -t.MaxHP); t:AcceptMPLoss(s, -t.MaxMP) end</use>
        </battle>
    </item>
    <item>
        <name>Megalixir</name>
        <desc>Restores all HP/MP in party</desc>
        <field target="Party">
            <canUse>return canPartyHeal(p)</canUse>
            <use>
                for i = 0, p.Size - 1 do
                    if p[i] ~= nil and not p[i].Death 
                    then
                        p[i].HP = p[i].MaxHP  
                        p[i].MP = p[i].MaxMP
                    end
                end            
            </use>
        </field>
        <battle target="Group">
            <use>
                for i = 0, t.Count - 1 do
                    if t[i] ~= nil and not t[i].Death 
                    then
                        t[i]:AcceptDamage(s, -t[i].MaxHP)
                        t[i]:AcceptMPLoss(s, -t[i].MaxMP)
                    end
                end
            </use>
        </battle>
    </item>
    <item>
        <name>Phoenix Down</name>
        <desc>Restores life</desc>
        <field target="Character">
            <canUse>return c.Death</canUse>
            <use>
                c:CureDeath()
                c.HP = c.MaxHP / 10
            </use>
        </field>
        <battle target="Combatant">
            <use>
                t:CureDeath()
                t:AcceptDamage(s, -c.MaxHP / 10)
            </use>
        </battle>
    </item>
    <item>
        <name>Tent</name>
        <desc>Restores all HP/MP in party</desc>
        <field target="Party">
            <canUse>return canPartyHeal(p)</canUse>
            <use>
                for i = 0,2 do
                    if p[i] ~= nil and not p[i].Death 
                    then
                        p[i].HP = p[i].MaxHP  
                        p[i].MP = p[i].MaxMP
                    end
                end            
            </use>
        </field>
    </item>
    <item>
        <name>Hyper</name>
        <desc>Cures [Sadness]</desc>
        <field target="Character">
            <canUse>return not c.Death and not c.Fury</canUse>
            <use>if c.Sadness then c:CureSadness() else c:InflictFury() end</use>
        </field>
        <battle target="Combatant">
            <use>t:InflictFury()</use>
        </battle>
    </item>
    <item>
        <name>Tranquilizer</name>
        <desc>Cures [Fury]</desc>
        <field target="Character">
            <canUse>return not c.Death and not c.Sadness</canUse>
            <use>if c.Fury then c:CureFury() else c:InflictSadness() end</use>
        </field>
        <battle target="Combatant">
            <use>t:InflictSadness()</use>
        </battle>
    </item>
    <item>
        <name>Power Source</name>
        <desc>Increases Strength</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c.IncrementStrength()</use>
        </field>
    </item>
    <item>
        <name>Guard Source</name>
        <desc>Increases Vitality</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c.IncrementVitality()</use>
        </field>
    </item>
    <item>
        <name>Speed Source</name>
        <desc>Increases Dexterity</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c.IncrementDexterity()</use>
        </field>
    </item>
    <item>
        <name>Magic Source</name>
        <desc>Increases Magic</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c.IncrementMagic()</use>
        </field>
    </item>
    <item>
        <name>Mind Source</name>
        <desc>Increases Spirit</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c.IncrementSpirit()</use>
        </field>
    </item>
    <item>
        <name>Luck Source</name>
        <desc>Increases Luck</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c.IncrementLuck()</use>
        </field>
    </item>
    <item>
        <name>Loco Weed</name>
        <desc>Inflicts [Confu]</desc>
        <battle target="Combatant">
            <use>t:InflictConfusion()</use>
        </battle>
    </item>
    <item>
        <name>Remedy</name>
        <desc>Cures all abnormal status ailments</desc>
        <field target="Character">
            <canUse>return true</canUse>
            <use>c:CureFury() c:CureSadness()</use>
        </field>
        <battle target="Combatant">
            <use>t:CureFury() c:CureSadness()</use>
        </battle>
    </item>
    <item>
        <name>Vagyrisk Claw</name>
        <desc>Inflicts [Petrify]</desc>
        <battle target="Combatant" intendedForEnemies="true">
            <use>t:InflictPetrify()</use>
        </battle>
    </item>
    <item>
        <name>Soft</name>
        <desc>Cures [Petrify]</desc>
        <battle target="Combatant" intendedForEnemies="true">
            <use>t:CurePetrify()</use>
        </battle>
    </item>
</items>